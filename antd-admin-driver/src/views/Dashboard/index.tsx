import { Avatar, Button, Card, Col, Descriptions, DescriptionsProps, Divider, Row } from "antd";
import styles from './index.module.less'
import { useEffect, useState } from "react";
import { useUserInfoStore } from "@/store";
import api from "@/api";
import { IDashBoard } from "@/types/modules/api";
import { formatLocaleAmount } from "@/utils/thousandNumber";
import { useCharts } from "@/hook/useCharts";

export default function Dashboard() {
  const userInfo = useUserInfoStore(state => state.userInfo)
  const [report, setReport] = useState<IDashBoard.reportData>()

  // ÊäòÁ∫øÂõæ
  const [lineRef, lineChart] = useCharts()

  // È•ºÂõæ
  const [pieCityRef, pieCityChart] = useCharts()

  // È•ºÂõæ
  const [pieAgeRef, pieAgeChart] = useCharts()

  // Èõ∑ËææÂõæ
  const [radarRef, radarChart] = useCharts()

  const descitems: DescriptionsProps['items'] = [
    {
      key: '1',
      label: 'Áî®Êà∑ID',
      children: userInfo.userId,
    },
    {
      key: '2',
      label: 'ÈÇÆÁÆ±',
      children: userInfo.userEmail,
    },
    {
      key: '3',
      label: 'Áä∂ÊÄÅ',
      children: userInfo.state,
    },
    {
      key: '4',
      label: 'ÊâãÊú∫Âè∑',
      children: userInfo.mobile,
    },
    {
      key: '5',
      label: 'Â≤ó‰Ωç',
      children: userInfo.job,
    },
  ];

  const getReportData = async () => {
    const data = await api.getReportData()
    setReport(data)
  }

  useEffect(() => {
    getReportData()
  }, [])

  // ËÆæÁΩÆÊäòÁ∫øÂõæ
  const setLineChart = () => {
    if (!lineChart) return;

    lineChart?.setOption({
      // title: {
      //   text: 'ËÆ¢ÂçïÂíåÊµÅÊ∞¥Ëµ∞ÂäøÂõæ'
      // },
      tooltip: {
        trigger: 'axis',
      },
      // È°∂ÈÉ®Âõæ‰æã
      legend: {
        data: ['ËÆ¢Âçï', 'ÊµÅÊ∞¥']
      },
      // ÁΩëÊ†ºÂÆπÂô®
      grid: {
        left: '5%',
        right: '15px',
        bottom: '10%',
      },
      xAxis: {
        data: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà', '7Êúà', '8Êúà', '9Êúà', '10Êúà', '11Êúà', '12Êúà']
      },
      yAxis: {
        type: 'value',
        boundaryGap: [0, '100%']
      },
      series: [
        {
          name: 'ËÆ¢Âçï',
          type: 'line',
          data: [10, 20, 30, 50, 60, 70, 80, 90, 100, 110, 120]
        },
        {
          name: 'ÊµÅÊ∞¥',
          type: 'line',
          data: [1000, 200, 300, 50, 600, 700, 800, 900, 1000, 1100, 1200]
        },
      ]
    })
  }

  // ËÆæÁΩÆÈ•ºÂõæ
  const setPieChart = () => {
    if (!pieCityChart || !pieAgeChart) return;

    pieCityChart?.setOption({
      title: {
        text: 'Âè∏Êú∫ÂüéÂ∏ÇÂàÜÂ∏É',
        left: 'center'
      },
      tooltip: {
        trigger: 'item'
      },
      legend: {
        orient: 'vertical',
        left: 'left'
      },
      series: [
        {
          name: 'ÂüéÂ∏ÇÂàÜÂ∏É',
          type: 'pie',
          radius: '50%',
          data: [
            { value: 1048, name: 'Âåó' },
            { value: 735, name: '‰∏ä' },
            { value: 580, name: 'Âπø' },
            { value: 484, name: 'Ê∑±' },
            { value: 300, name: 'Êù≠' }
          ],
        }
      ]
    })

    pieAgeChart?.setOption({
      title: {
        text: 'Âè∏Êú∫Âπ¥ÈæÑÂàÜÂ∏É',
        left: 'center'
      },
      tooltip: {
        trigger: 'item'
      },
      legend: {
        orient: 'vertical',
        left: 'left'
      },
      series: [
        {
          name: 'Âπ¥ÈæÑÂàÜÂ∏É',
          type: 'pie',
          radius: [40, 140],
          roseType: 'area',
          data: [
            { value: 30, name: 'Âåó' },
            { value: 45, name: '‰∏ä' },
            { value: 60, name: 'Âπø' },
            { value: 20, name: 'Ê∑±' },
            { value: 150, name: 'Êù≠' }
          ],
        }
      ]
    })
  }

  // ËÆæÁΩÆÈõ∑Âõæ
  const setRadarChart = () => {
    if (!radarChart) return;

    radarChart?.setOption({
      // title: {
      //   text: 'Âè∏Êú∫Ê®°ÂûãËØäÊñ≠',
      //   left: 'center',
      // },
      legend: {
        data: ['Âè∏Êú∫Ê®°ÂûãËØäÊñ≠'],
      },
      radar: {
        // ‰∫î‰∏™ÊñπÂêë
        indicator: [
          { name: 'ÊúçÂä°ÊÄÅÂ∫¶', max: 10 }, // ÊúÄÂ§ßÂÄºÔºåÂíåÁúüÂÆûÊï∞ÊçÆÂØπÊØî
          { name: 'Âú®Á∫øÊó∂Èïø', max: 400 },
          { name: 'Êé•ÂçïÁéá', max: 100 },
          { name: 'ËØÑÂàÜ', max: 5 },
          { name: 'ÂÖ≥Ê≥®Â∫¶', max: 10000 },
        ],
      },
      series: [
        {
          name: 'Ê®°ÂûãËØäÊñ≠',
          type: 'radar',
          data: [
            {
              name: 'Âè∏Êú∫Ê®°ÂûãËØäÊñ≠',
              value: [8, 300, 80, 4, 9000]
            }
          ],
        }
      ]
    })
  }


  useEffect(() => {
    setLineChart()
    setPieChart()
    setRadarChart()
  }, [lineChart, pieCityChart, pieAgeChart, radarChart])

  return (
    <div className={styles.dashboard}>
      <div className={styles.userInfo}>
        <Avatar size={80} src={<img src={userInfo.userImg} alt="avatar" />} />
        <Descriptions title="Ê¨¢Ëøéüëèüèª" items={descitems} />
      </div>

      <Divider />

      <div>
        <Row gutter={16}>
          <Col span={6}>
            <Card title="Âè∏Êú∫Êï∞Èáè" hoverable type="inner">
              {formatLocaleAmount(report?.driverCount)}‰∏™
            </Card>
          </Col>
          <Col span={6}>
            <Card title="ÊÄªÊµÅÊ∞¥" hoverable type="inner" >
              {formatLocaleAmount(report?.totalMoney)}ÂÖÉ
            </Card>
          </Col>
          <Col span={6}>
            <Card title="ÊÄªËÆ¢Âçï" hoverable type="inner">
              {formatLocaleAmount(report?.orderCount)}Âçï
            </Card>
          </Col>
          <Col span={6}>
            <Card title="ÂºÄÈÄöÂüéÂ∏Ç" hoverable type="inner">
              {formatLocaleAmount(report?.cityNum)}Â∫ß
            </Card>
          </Col>
        </Row>
      </div>

      <Divider />

      <div>
        <Card
          title="ËÆ¢ÂçïÂíåÊµÅÊ∞¥Ëµ∞ÂäøÂõæ"
          extra={<Button type="primary">Âà∑Êñ∞</Button>}
        >
          <div ref={lineRef} className={styles.itemChart}></div>
        </Card>

        <Divider dashed />

        <Card
          title="ËÆ¢ÂçïÂíåÊµÅÊ∞¥Ëµ∞ÂäøÂõæ"
          extra={<Button type="primary">Âà∑Êñ∞</Button>}
        >
          <div className={styles.pieChart}>
            <div ref={pieCityRef} className={styles.pieChartItem}></div>
            <div ref={pieAgeRef} className={styles.pieChartItem}></div>
          </div>
        </Card>

        <Divider dashed />

        <Card
          title="ËÆ¢ÂçïÂíåÊµÅÊ∞¥Ëµ∞ÂäøÂõæ"
          extra={<Button type="primary">Âà∑Êñ∞</Button>}
        >
          <div ref={radarRef} className={styles.itemChart}></div>
        </Card>
      </div>
    </div>
  )
}